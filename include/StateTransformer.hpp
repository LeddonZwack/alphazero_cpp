#ifndef STATE_TRANSFORMER_HPP
#define STATE_TRANSFORMER_HPP

#include "State.hpp"
#include <functional>
#include <vector>

// Our movement function takes a uint64_t representing a bitboard with a single set bit
// and returns the destination bitboard.
namespace Chess {

    using MovementFunction = std::function<uint64_t(uint64_t)>;

    /**
     * @brief Updates the given state based on the specified action.
     *
     * @param state Reference to the current state.
     * @param action An integer action (as generated by MCTS) where:
     *               - from_square = action % 64
     *               - movement_type = action / 64
     * @param movementFunctions Vector of movement functions mapping movement_type to a bitshift function.
     * @return Reference to the updated state.
     */
    State& get_next_state(State &state, int action, const std::vector<MovementFunction> &movementFunctions);

} // namespace Chess

#endif // STATE_TRANSFORMER_HPP
